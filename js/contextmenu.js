// Generated by CoffeeScript 1.9.3
(function() {
  window.ContextMenuTable = (function() {
    // Build the split items in submenu of the contextmenu according to a number max of split
    ContextMenuTable.prototype.buildSplitSubItems = function(number_splits) {
      var i, j, ref, subItems;
      // It not make sense to split in 1 cell :)
      subItems = {
        callback: (function(_this) {
          return function(key, opt) {
            _this.tableSplitCell(key, opt.$trigger);
            return _this.table.setMouseDown(false);
          };
        })(this)
      };
      for (i = j = 2, ref = number_splits; j <= ref; i = j += 1) {
        subItems[i] = {
          name: i,
          // What to do when the this item will be triggered
          callback: (function(_this) {
            // key : number of splits
            return function(key, opt) {
              _this.table.splitCell(opt.$trigger, key);
              return Utils.mouseTableUp(_this.table);
            };
          })(this),
          // Can we split this cell ?
          disabled: (function(_this) {
            // key : number of splits
            return function(key, opt) {
              return _this.table.checkIfNotSplittable(opt.$trigger, key);
            };
          })(this)
        };
      }
      return this.items.split.items = subItems;
    };

    // Build the context menu
    ContextMenuTable.prototype.build = function(number_splits) {
      return this.items = {
        // If the user want to split the cell
        split: {
          name: 'split',
          disabled: (function(_this) {
            return function(key, opt) {
              var $selected;
              $selected = _this.table.getTableNode().find('.selected');
              if ($selected.length !== 1) {
                return true;
              }
              return false;
            };
          })(this)
        },
        // If the user want to merge cells
        merge: {
          name: 'merge',
          disabled: (function(_this) {
            return function(key, opt) {
              return _this.table.checkIfNotMergeable(_this.table.getTableNode().find('.selected'));
            };
          })(this),
          callback: (function(_this) {
            return function(key, opt) {
              _this.table.mergeCells(_this.table.getTableNode().find('.selected'));
              return Utils.mouseTableUp(_this.table);
            };
          })(this)
        }
      };
    };

    function ContextMenuTable(table, number_splits_max) {
      this.table = table;
      this.number_splits_max = number_splits_max;
      this.$contextMenu = null;
      this.items = {};
      this.table.getTableNode().on({
        tableBuilt: (function(_this) {
          return function() {
            _this.build(_this.number_splits_max);
            _this.buildSplitSubItems(_this.number_splits_max);
            return $.contextMenu({
              selector: '.cell',
              items: _this.items
            });
          };
        })(this)
      });
    }

    return ContextMenuTable;

  })();

  window.ContextMenuItem = (function() {

    // Build the context menu
    ContextMenuItem.prototype.build = function() {
      return this.items = {
        // If the user want to split the cell
        remove: {
          name: 'remove',
          callback: (function(_this) {
            return function(key, opt) {
              opt.$trigger.trigger('toRemove');
              return Utils.mouseTableUp(_this.table);
            };
          })(this)
        }
      };
    };

    function ContextMenuItem(table) {
      this.table = table;
      this.$contextMenu = null;
      this.items = {};
      // Build context menu when the table will be build
      this.table.getTableNode().on({
        tableBuilt: (function(_this) {
          return function() {
            _this.build();
            return $.contextMenu({
              selector: '.item',
              items: _this.items
            });
          };
        })(this)
      });
    }

    return ContextMenuItem;

  })();

}).call(this);
