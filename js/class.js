// Generated by CoffeeScript 1.9.3
//TODO : Add commentaries
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Class = (function() {
    Class.prototype.createClassNode = function(name) {
      var $item;
      $item = $('<li></li>').addClass('list-group-item draggable notion_class').attr('draggable', 'true').text(name);
      return $item;
    };

    function Class(notion_name, name1, class_attributes_model, instance_attributes_model, display_attributes) {
      this.notion_name = notion_name;
      this.name = name1;
      this.class_attributes_model = class_attributes_model;
      this.instance_attributes_model = instance_attributes_model;
      this.display_attributes = display_attributes;
      this.class_attributes = Utils.copyHash(this.class_attributes_model);
      this.instances = [];
      this.$class = this.createClassNode(this.name);
    }

    Class.prototype.setClassAttributeValue = function(name, value) {
      var model_attribute;
      model_attribute = this.class_attributes_model[name];
      if ((model_attribute != null) && (model_attribute === "" || value === "" || indexOf.call(model_attribute.split('/'), value) >= 0)) {
        this.class_attributes[name] = value;
        this.update();
        return true;
      }
      console.error("setClassAttributeValue have a name or a value which doesn't match");
      return false;
    };

    Class.prototype.createInstance = function(tags, no_trigger) {
      var instance;
      instance = new Instance(this.notion_name, this.name, this.class_attributes, this.instance_attributes_model, tags, this.display_attributes);
      if ((no_trigger == null) || no_trigger === false) {
        this.$class.trigger('instanceCreated', [instance]);
      }
      instance.getInstanceNode().on({
        itemMoved: (function(_this) {
          return function(e, $new_item) {
            return instance.setInstanceNode($new_item);
          };
        })(this),
        toRemove: (function(_this) {
          return function(event) {
            _this.instances.splice(_this.instances.indexOf(instance), 1);
            return $(event.currentTarget).remove();
          };
        })(this)
      });
      this.instances.push(instance);
      return instance;
    };

    Class.prototype.getClassNode = function() {
      return this.$class;
    };

    Class.prototype.getNotionName = function() {
      return this.notion_name;
    };

    Class.prototype.getClassAttributes = function() {
      return this.class_attributes;
    };

    Class.prototype.getClassAttributesModel = function() {
      return this.class_attributes_model;
    };

    Class.prototype.getInstances = function() {
      return this.instances;
    };

    Class.prototype.update = function() {
      this.name = this.class_attributes['name'];
      return this.$class.find('.text').text(this.name);
    };

    return Class;

  })();

}).call(this);
