// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PopupLoadNotion = (function(superClass) {
    extend(PopupLoadNotion, superClass);

    function PopupLoadNotion() {
      this.$popuploadnotion = null;
    }

    PopupLoadNotion.prototype.create = function(saves) {
      var $body, $closebutton, $menu, $name, $notion, $notion_name, $notions, $restore_button, $save_block, fn, i, len, notion, ref, save, savename;
      $body = $('<div></div>').addClass('load');
      for (savename in saves) {
        save = saves[savename];
        $save_block = $('<div></div>').addClass('block_restore');
        $name = $('<strong></strong>').text(save.name);
        $notions = $('<div></div>').addClass('notion');
        ref = save.notions;
        fn = (function(_this) {
          return function(notion) {
            return $restore_button.on({
              click: function() {
                _this.$popuploadnotion.trigger('loadNotion', [notion]);
                return _this.close();
              }
            });
          };
        })(this);
        for (i = 0, len = ref.length; i < len; i++) {
          notion = ref[i];
          $notion = $('<div></div>');
          $notion_name = $('<span></span>').text(notion.name);
          $restore_button = $('<span></span>').addClass('span_action icon glyphicon glyphicon-floppy-open');
          fn(notion);

          $notion.append([$restore_button, $notion_name]);
          $notions.append($notion);
        }
        $save_block.append([$name, $notions]);
        $body.append($save_block);
      }
      // Menu (close)
      $closebutton = this.createCloseButton();
      $menu = $('<div></div>').append([$closebutton]);

      this.$popuploadnotion = this.createPopup([this.createTitle('Load Notion')], [$body], [$menu], 'load_notion');
      this.applyCloseButtonEvents($closebutton, this.$popuploadnotion);
     
      this.$popuploadnotion.css({
        'min-width': '400px',
        'max-width': '800px'
      });
      return this.$popuploadnotion.on({
        close: (function(_this) {
          return function() {
            return _this.$popuploadnotion.empty();
          };
        })(this)
      });
    };

    PopupLoadNotion.prototype.show = function() {
      return this.$popuploadnotion.popup('show');
    };

    PopupLoadNotion.prototype.close = function() {
      return this.$popuploadnotion.popup('hide');
    };

    PopupLoadNotion.prototype.getNode = function() {
      return this.$popuploadnotion;
    };

    return PopupLoadNotion;

  })(Popup);

}).call(this);
