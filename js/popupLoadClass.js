//TODO : unused ?
// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PopupLoadClass = (function(superClass) {
    extend(PopupLoadClass, superClass);

    function PopupLoadClass() {
      this.$popuploadclass = null;
    }

    PopupLoadClass.prototype.create = function(saves, notion_name, class_attributes_model, instance_attributes_model) {
      var $body, $class, $class_name, $classes, $closebutton, $menu, $name, $restore_button, $save_block, fn, i, j, len, len1, my_class, notion, ref, ref1, save, savename;
      $body = $('<div></div>').addClass('load');
      for (savename in saves) {
        save = saves[savename];
        $save_block = $('<div></div>').addClass('block_restore');
        $name = $('<strong></strong>').text(save.name);
        $classes = $('<div></div>').addClass('notion');
        ref = save.notions;
        for (i = 0, len = ref.length; i < len; i++) {
          notion = ref[i];
          if (notion.name === notion_name && Utils.hashEqual(notion.class_attributes_model, class_attributes_model) && Utils.hashEqual(notion.instance_attributes_model, instance_attributes_model)) {
            ref1 = notion['class_instances'];
            fn = (function(_this) {
              return function(my_class) {
                return $restore_button.on({
                  click: function() {
                    _this.$popuploadclass.trigger('loadClass', [my_class]);
                    return _this.close();
                  }
                });
              };
            })(this);
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              my_class = ref1[j];
              $class = $('<div></div>');
              $class_name = $('<span></span>').text(my_class['class_attributes']['name']);
              $restore_button = $('<span></span>').addClass('span_action icon glyphicon glyphicon-floppy-open');
              fn(my_class);
              $class.append([$restore_button, $class_name]);
              $classes.append($class);
            }
          }
        }
        $save_block.append([$name, $classes]);
        $body.append($save_block);
      }
      // Menu (close)
      $closebutton = this.createCloseButton();
      $menu = $('<div></div>').append([$closebutton]);
      
      this.$popuploadclass = this.createPopup([this.createTitle('Load Class for ' + notion_name)], [$body], [$menu], 'load_class');
      this.applyCloseButtonEvents($closebutton, this.$popuploadclass);
      this.$popuploadclass.css({
        'min-width': '400px',
        'max-width': '800px'
      });
      return this.$popuploadclass.on({
        close: (function(_this) {
          return function() {
            return _this.$popuploadclass.empty();
          };
        })(this)
      });
    };

    PopupLoadClass.prototype.show = function() {
      return this.$popuploadclass.popup('show');
    };

    PopupLoadClass.prototype.close = function() {
      return this.$popuploadclass.popup('hide');
    };

    PopupLoadClass.prototype.getNode = function() {
      return this.$popuploadclass;
    };

    return PopupLoadClass;

  })(Popup);

}).call(this);
