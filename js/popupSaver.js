// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PopupSaver = (function(superClass) {
    extend(PopupSaver, superClass);

    function PopupSaver() {
      this.$popupsaver = null;
    }

    PopupSaver.prototype.create = function(notions) {
      var $body, $closebutton, $create_button, $group, $input_classes, $input_instances, $input_notion, $input_save, $label_description, $label_save, $label_structure, $menu, $notion_name, $save_class, $save_instance, $save_notion, $structure_checkbox, $table, $td_classes, $td_instances, $td_name, $td_notion, $text_description, $tr, i, len, notion;
      $body = $('<div></div>').attr('id', 'popup_saver');
      $group = this.createFieldset('Informations');
      $group.attr('id', 'saver_informations');
      $label_save = this.createLabel('save_name', 'Name');
      $input_save = this.createInputText('', 'save_name');
      $label_description = this.createLabel('save_description', 'Description');
      $text_description = $('<textarea></textarea>').addClass('form-control');
      $text_description.attr({
        id: 'save_description',
        rows: '3'
      });
      $group.append([$label_save, $input_save, $label_description, $text_description]);
      $body.append($group);
      $group = this.createFieldset('Structure');
      $group.attr('id', 'saver_structure');
      $structure_checkbox = this.createCheckbox('', 'save_structure');
      $structure_checkbox.on({
        change: function() {
          var is_checked;
          is_checked = $(this).is(':checked');
          if (is_checked === false) {
            return $(this).closest('#popup_saver').find('input.instance_checkbox').prop('checked', false);
          }
        }
      });
      $label_structure = this.createLabel('save_structure', 'Table').prepend($structure_checkbox);
      $group.append($label_structure);
      $body.append($group);
      $group = this.createFieldset('Tags');
      $group.attr('id', 'saver_tags');
      $label_structure = this.createLabel('save_tags', 'Tags').prepend(this.createCheckbox('', 'save_tags'));
      $group.append($label_structure);
      $body.append($group);
      $group = this.createFieldset('Notions').attr('id', 'saver_notions');
      $table = $('<table></table>');
      $notion_name = $('<th></th>').text('Name');
      $save_notion = $('<th></th>').text('Notion');
      $save_class = $('<th></th>').text('Classes');
      $save_instance = $('<th></th>').text('Instances');
      $tr = $('<tr></tr>').append([$notion_name, $save_notion, $save_class, $save_instance]);
      $table.append($tr);
      for (i = 0, len = notions.length; i < len; i++) {
        notion = notions[i];
        $td_name = $('<td></td>').text(notion.getName());
        $input_notion = this.createCheckbox(notion.getName(), 'notion_' + notion.getName());
        $td_notion = $('<td></td>').append($input_notion);
        $input_classes = this.createCheckbox(notion.getName(), 'classes_' + notion.getName());
        $td_classes = $('<td></td>').append($input_classes);
        $input_instances = this.createCheckbox(notion.getName(), 'instances_' + notion.getName()).addClass('instance_checkbox');
        $td_instances = $('<td></td>').append($input_instances);
        $input_notion.on({
          change: function() {
            var is_checked;
            is_checked = $(this).is(':checked');
            if (is_checked === false) {
              $(this).parent().next().find('input').prop('checked', false);
              return $(this).parent().next().next().find('input').prop('checked', false);
            }
          }
        });
        $input_classes.on({
          change: function() {
            var is_checked;
            is_checked = $(this).is(':checked');
            if (is_checked === true) {
              $(this).parent().prev().find('input').prop('checked', true);
            }
            if (is_checked === false) {
              return $(this).parent().next().find('input').prop('checked', false);
            }
          }
        });
        $input_instances.on({
          change: function() {
            var is_checked;
            is_checked = $(this).is(':checked');
            if (is_checked === true) {
              $(this).parent().prev().find('input').prop('checked', true);
              $(this).parent().prev().prev().find('input').prop('checked', true);
              return $(this).closest('#popup_saver').find('#saver_structure input[name=save_structure]').prop('checked', true);
            }
          }
        });
        $tr = $('<tr></tr>').append([$td_name, $td_notion, $td_classes, $td_instances]);
        $table.append($tr);
      }
      $group.append($table);
      $body.append($group);
      $create_button = this.createButton('Save', true);
      $create_button.on({
        click: (function(_this) {
          return function() {
            var $td, j, len1, ref, to_save, tr;
            to_save = {
              name: _this.$popupsaver.find('input[name=save_name]').val(),
              description: _this.$popupsaver.find('#save_description').val(),
              tags: _this.$popupsaver.find('input[name=save_tags]').is(':checked'),
              structure: _this.$popupsaver.find('input[name=save_structure]').is(':checked'),
              notions: {}
            };
            ref = $table.find('tr');
            for (j = 0, len1 = ref.length; j < len1; j++) {
              tr = ref[j];
              $tr = $(tr);
              $td = $tr.find('td');
              if ($td.length === 0) {
                continue;
              }
              to_save.notions[$td.eq(0).text()] = {
                notion: $td.eq(1).find('input').is(':checked'),
                classes: $td.eq(2).find('input').is(':checked'),
                instances: $td.eq(3).find('input').is(':checked')
              };
            }
            _this.$popupsaver.trigger('saverSet', [to_save]);
            return _this.close();
          };
        })(this)
      });
      $closebutton = this.createCloseButton();
      $menu = $('<div></div>').append([$create_button, $closebutton]);
      this.$popupsaver = this.createPopup([this.createTitle('Save As')], [$body], [$menu], 'saver');
      this.applyCloseButtonEvents($closebutton, this.$popupsaver);
      this.$popupsaver.css({
        'min-width': '400px',
        'max-width': '800px'
      });
      return this.$popupsaver.on({
        close: (function(_this) {
          return function() {
            return _this.$popupsaver.empty();
          };
        })(this)
      });
    };

    PopupSaver.prototype.show = function() {
      return this.$popupsaver.popup('show');
    };

    PopupSaver.prototype.close = function() {
      return this.$popupsaver.popup('hide');
    };

    PopupSaver.prototype.getNode = function() {
      return this.$popupsaver;
    };

    return PopupSaver;

  })(Popup);

}).call(this);
