// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PopupFilter = (function(superClass) {
    extend(PopupFilter, superClass);

    function PopupFilter() {
      this.$popupfilter = null;
      this.notions = {};
    }

    // Create the popup when user want to create notions
    PopupFilter.prototype.create = function(tags) {
      var $body, $closebutton, $create_button, $filter_div, $label, $menu, $select_tag, $tag_div, createFilter;
      $body = $('<div></div>').attr('id', 'popup_filter');
      $filter_div = $('<div></div>');
      $tag_div = $('<div></div>');
      createFilter = (function(_this) {
        return function() {
          var $div, $input, $select, $span;
          $div = $('<div></div>').addClass('form-inline');
          $span = $('<span></span>').text('Attribute');
          $select = _this.createSelectList(['Contains', 'Doesn\'t contain'], '', false);
          $input = _this.createInputText('input_filter').addClass('default');
          $input.on({
            // To add or delete a new input ?
            keyup: function(event) {
              var $elem, $next_input;
              $elem = $(event.currentTarget);
              // Add the next input if it is not already present
              // Show the right panel if needed
              if ($elem.val().length !== 0) {
                if ($elem.parent().next().length === 0) {
                  return createFilter();
                }
              // Remove the next input (if it is empty) if the actual input is empty too
              // Hide the right panel if needed
              } else {
                $next_input = $elem.parent().next();
                if ($next_input.length !== 0 && $next_input.find('input').val().length === 0) {
                  return $next_input.remove();
                }
              }
            }
          });
          $div.append([$span, $select, $input]);
          return $filter_div.append($div);
        };
      })(this);

      createFilter();

      $label = $('<label></label>').attr('for', 'apply_tag').text('Apply tag');
      $select_tag = this.createSelectList(tags, 'apply_tag', false);
      $label.append($select_tag);
      
      $body.append([$filter_div, $label, $select_tag]);

      // Menu (validate, close...)
      $create_button = this.createButton('Save', true);
      $create_button.on({
        click: (function(_this) {
          return function() {
            var $input, $select, filters, i, len, ref, ref1, select, tag;
            tag = $select_tag.val();
            
            filters = {};
            ref = $filter_div.find('select');
            for (i = 0, len = ref.length; i < len; i++) {
              select = ref[i];
              $select = $(select);
              $input = $select.next();
              if ($input.val() === "") {
                continue;
              }
              filters[$input.val()] = (ref1 = $select.val() === 'Contains') != null ? ref1 : {
                "true": false
              };
            }
            _this.$popupfilter.trigger('filterSet', [tag, filters]);
            return _this.close();
          };
        })(this)
      });
      $closebutton = this.createCloseButton();
      $menu = $('<div></div>').append([$create_button, $closebutton]);
      
      // Append the left part and the right part to our popup
      this.$popupfilter = this.createPopup([this.createTitle('Filters')], [$body], [$menu], 'filter');
      this.applyCloseButtonEvents($closebutton, this.$popupfilter);
      return this.$popupfilter.on({
        close: (function(_this) {
          return function() {
            return _this.$popupfilter.empty();
          };
        })(this)
      });
    };

    // Show the popup to create notions
    PopupFilter.prototype.show = function() {
      return this.$popupfilter.popup('show');
    };

    // Hide the popup to create notions
    PopupFilter.prototype.close = function() {
      this.$popupfilter.popup('hide');
      return this.$popupfilter.empty();
    };

    // Return the popupnotions object
    PopupFilter.prototype.getNode = function() {
      return this.$popupfilter;
    };

    return PopupFilter;

  })(Popup);

}).call(this);
