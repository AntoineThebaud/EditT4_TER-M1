// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PopupInstance = (function(superClass) {
    extend(PopupInstance, superClass);

    function PopupInstance() {
      this.$popupinstance = null;
    }

    PopupInstance.prototype.create = function(notion_name, class_attributes, instance_attributes_model, instance_attributes, instance_tags) {
      var $body, $closebutton, $create_button, $div, $group, $input, $label, $menu, key, value;
      $body = $('<div></div>');

      // Class attributes
      $group = this.createFieldset('Class attributes');
      $group.attr('id', 'class_attributes');
      for (key in class_attributes) {
        value = class_attributes[key];
        $label = this.createLabel(key, key);
        // Create input
        $input = this.createInputText('', key).attr('disabled', 'disabled').val(value);
        $group.append([$label, $input]);
        $body.append($group);
      }

      // Instance attributes
      $group = this.createFieldset('Instance attributes');
      $group.attr('id', 'instance_attributes');
      for (key in instance_attributes_model) {
        value = instance_attributes_model[key];
        // Create input
        $label = this.createLabel(key, key);
        if (value === '') {
          $input = this.createInputText('', key);
        // Create list
        } else {
          $input = this.createSelectList(value.split('/'), key);
        }
        $input.val(instance_attributes[key]);
        $group.append([$label, $input]);
        $body.append($group);
      }
      // Tags
      $group = this.createFieldset('Tags');
      $group.attr('id', 'instance_tags');
      for (key in instance_tags) {
        value = instance_tags[key];
        $label = $('<label></label>').text(key);
        $input = this.createCheckbox('', key, value);
        $label.prepend($input);
        $div = $('<div></div>').addClass('checkbox').append($label);
        $group.append($div);
        $body.append($group);
      }
      // Menu (validate, close...)
      $create_button = this.createButton('Save', true);
      $create_button.on({
        click: (function(_this) {
          return function() {
            var $elem, $inputs_class_instance, $inputs_tags, attributes_instance, elem, i, j, len, len1, tags_instance;
            $inputs_class_instance = _this.$popupinstance.find('#instance_attributes select, #instance_attributes input');
            attributes_instance = {};
            for (i = 0, len = $inputs_class_instance.length; i < len; i++) {
              elem = $inputs_class_instance[i];
              $elem = $(elem);
              attributes_instance[$elem.attr('name')] = $elem.val();
            }
            tags_instance = {};
            $inputs_tags = _this.$popupinstance.find('#instance_tags input');
            for (j = 0, len1 = $inputs_tags.length; j < len1; j++) {
              elem = $inputs_tags[j];
              $elem = $(elem);
              tags_instance[$elem.attr('id')] = $elem.is(':checked');
            }
            _this.$popupinstance.trigger('instanceSet', [attributes_instance, tags_instance]);
            return _this.close();
          };
        })(this)
      });
      $closebutton = this.createCloseButton();
      $menu = $('<div></div>').append([$create_button, $closebutton]);
      this.$popupinstance = this.createPopup([this.createTitle(notion_name)], [$body], [$menu], 'class_instance');
      this.applyCloseButtonEvents($closebutton, this.$popupinstance);
      this.$popupinstance.css({
        width: "400px"
      });
      return this.$popupinstance.on({
        close: (function(_this) {
          return function() {
            return _this.$popupinstance.empty();
          };
        })(this)
      });
    };

    PopupInstance.prototype.show = function() {
      return this.$popupinstance.popup('show');
    };

    PopupInstance.prototype.close = function() {
      return this.$popupinstance.popup('hide');
    };

    PopupInstance.prototype.getNode = function() {
      return this.$popupinstance;
    };

    return PopupInstance;

  })(Popup);

}).call(this);
