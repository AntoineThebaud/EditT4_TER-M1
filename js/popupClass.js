// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PopupClass = (function(superClass) {
    extend(PopupClass, superClass);

    function PopupClass() {
      this.popupclass = null;
    }

    PopupClass.prototype.create = function(notion_name, class_attributes_model, class_attributes, valid_text) {
      var $body, $close_button, $create_button, $input, $label, $menu, key, value;
      $body = $('<div></div>');
      for (key in class_attributes_model) {
        value = class_attributes_model[key];
        $label = this.createLabel(key, key);
        if (value === '') {
          $input = this.createInputText('', key);
        } else {
          $input = this.createSelectList(value.split('/'), key);
        }
        $input.val(class_attributes[key]);
        $body.append([$label, $input]);
      }
      $create_button = this.createButton(valid_text != null ? valid_text : 'Save', true);
      $create_button.on({
        click: (function(_this) {
          return function() {
            var $elem, $inputs, elem, i, len, my_class;
            $inputs = _this.$popupclass.find('select, input');
            my_class = {};
            for (i = 0, len = $inputs.length; i < len; i++) {
              elem = $inputs[i];
              $elem = $(elem);
              my_class[$elem.attr('name')] = $elem.val();
            }
            _this.$popupclass.trigger('classCreated', [my_class]);
            return _this.close();
          };
        })(this)
      });
      $close_button = this.createCloseButton();
      $menu = $('<div></div>').append([$create_button, $close_button]);
      this.$popupclass = this.createPopup([this.createTitle(notion_name)], [$body], [$menu], 'my_class');
      this.applyCloseButtonEvents($close_button, this.$popupclass);
      this.$popupclass.css({
        width: "400px"
      });
      return this.$popupclass.on({
        close: (function(_this) {
          return function() {
            return _this.$popupclass.empty();
          };
        })(this)
      });
    };

    PopupClass.prototype.show = function() {
      return this.$popupclass.popup('show');
    };

    PopupClass.prototype.close = function() {
      this.$popupclass.popup('hide');
      return this.$popupclass.empty();
    };

    PopupClass.prototype.getNode = function() {
      return this.$popupclass;
    };

    return PopupClass;

  })(Popup);

}).call(this);
