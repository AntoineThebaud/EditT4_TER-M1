// Generated by CoffeeScript 1.9.3
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Instance = (function() {

    // --------------- Private methods ---------------
    Instance.prototype.createInstanceNode = function(name) {
      var $div;
      $div = $('<div></div>').attr('draggable', 'true').addClass('draggable item');
      this.updateDisplay($div);
      return $div;
    };

    function Instance(notion_name, class_name, class_attributes, instance_attributes_model, instance_tags, display_attributes) {
      this.notion_name = notion_name;
      this.class_name = class_name;
      this.class_attributes = class_attributes;
      this.instance_attributes_model = instance_attributes_model;
      this.instance_tags = instance_tags;
      this.display_attributes = display_attributes;
      this.instance_attributes = Utils.copyHash(this.instance_attributes_model);
      this.$instance = this.createInstanceNode(this.class_name);
    }

    // --------------- Public methods ---------------
    Instance.prototype.setInstanceAttributesValues = function(instance_attributes) {
      var model_attribute, name, value;
      for (name in instance_attributes) {
        value = instance_attributes[name];
        model_attribute = this.instance_attributes_model[name];
        // Check if the couple name/value is good
        if ((model_attribute != null) && (model_attribute === "" || value === "" || indexOf.call(model_attribute.split('/'), value) >= 0)) {
          this.instance_attributes[name] = value;
        } else {
          console.error("setInstanceAttributeValue have a name or a value which doesn't match");
          return false;
        }
      }
      return true;
    };

    Instance.prototype.setInstanceNode = function($new_node) {
      return this.$instance = $new_node;
    };

    Instance.prototype.getClassAttributes = function() {
      return this.class_attributes;
    };

    Instance.prototype.getInstanceAttributesModel = function() {
      return this.instance_attributes_model;
    };

    Instance.prototype.getInstanceAttributes = function() {
      return this.instance_attributes;
    };

    Instance.prototype.getInstanceNode = function() {
      return this.$instance;
    };

    Instance.prototype.setInstanceTags = function(tags) {
      return this.instance_tags = tags;
    };

    Instance.prototype.addInstanceTag = function(tag) {
      return this.instance_tags[tag] = true;
    };

    Instance.prototype.updateDiffInstanceTags = function(tags) {
      var i, key, len, ref, results, tag, val;
      ref = this.instance_tags;
      // Delete tags which don't exist anymore
      for (key in ref) {
        val = ref[key];
        if (indexOf.call(tags, key) < 0) {
          delete this.instance_tags[key];
        }
      }
      results = [];
      // Create and put to false new tags
      for (i = 0, len = tags.length; i < len; i++) {
        tag = tags[i];
        if (this.instance_tags[tag] == null) {
          results.push(this.instance_tags[tag] = false);
        }
      }
      return results;
    };

    Instance.prototype.getInstanceTags = function() {
      return this.instance_tags;
    };

    Instance.prototype.updateNode = function() {
      return this.updateDisplay(this.$instance);
    };

    Instance.prototype.updateDisplay = function($div) {
      var attribute, cell_text, tooltip_text;
      cell_text = [];
      tooltip_text = [];
      for (attribute in this.display_attributes) {
        // Cell display
        if (this.display_attributes[attribute]['cell'] === true) {
          cell_text.push(this.class_attributes[attribute] || this.instance_attributes[attribute]);
        }
        // Tooltip display
        if (this.display_attributes[attribute]['tooltip'] === true) {
          tooltip_text.push(attribute + ' : ' + (this.class_attributes[attribute] || this.instance_attributes[attribute]));
        }
      }
      $div.html(cell_text.join('<br />'));
      return $div.attr('title', tooltip_text.join('\n'));

      // TODO resizable item
      //$resizable = $('<div></div>')
      //$resizable.addClass('item-resize')
      //$div.append($resizable)
    };

    Instance.prototype.setColor = function(color) {
      return this.color = color;
    };

    Instance.prototype.updateColorAndDisplayNodes = function(colors, tags_conf) {
      var $div_tags, print_tag, ref, tag, text_tag, value;
      this.$instance.css('border-color', colors['default']);
      text_tag = 'Tags: ';
      print_tag = false;
      ref = this.instance_tags;
      for (tag in ref) {
        value = ref[tag];
        if (!(value === true)) {
          continue;
        }
        this.$instance.css('border-color', tags_conf[tag]['color']);
        if (tags_conf[tag]['display'] === true) {
          text_tag += tag + " ";
          print_tag = true;
        }
      }
      if (print_tag === true) {
        $div_tags = this.$instance.find('.div_tags');
        if ($div_tags.length === 0) {
          return this.$instance.append($('<div></div>').addClass('div_tags').text(text_tag));
        } else {
          return $div_tags.text(text_tag);
        }
      }
    };

    return Instance;

  })();

}).call(this);
