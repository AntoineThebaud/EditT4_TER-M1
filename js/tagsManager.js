// Generated by CoffeeScript 1.9.3
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.TagsManager = (function() {
    function TagsManager() {
      this.clear();
    }

    TagsManager.prototype.clear = function() {
      this.tags = [];
      this.tags_conf = {};
      return this.colors = {
        'default': '#C2C2C2',
        white: 'rgb(255, 255, 255)',
        black: 'rgb(0, 0, 0)',
        red: 'rgb(255, 0, 0)',
        green: 'rgb(0, 255, 0)',
        blue: 'rgb(0, 0, 255)'
      };
    };

    TagsManager.prototype.setTags = function(tags) {
      this.tags = tags;
      return this.updateTagsConf();
    };

    TagsManager.prototype.getTags = function() {
      return this.tags;
    };

    TagsManager.prototype.getHashTags = function() {
      var i, len, ref, tag, tags;
      tags = {};
      ref = this.tags;
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        tags[tag] = false;
      }
      return tags;
    };

    TagsManager.prototype.getTagsConf = function() {
      return this.tags_conf;
    };

    TagsManager.prototype.setTagsConf = function(tags_conf) {
      return this.tags_conf = tags_conf;
    };

    TagsManager.prototype.updateTagsConf = function() {
      var i, len, ref, results, tag;
      for (tag in this.tags_conf) {
        if ((indexOf.call(this.tags, tag) < 0)) {
          delete this.tags_conf[tag];
        }
      }
      ref = this.tags;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        if (this.tags_conf[tag] == null) {
          results.push(this.tags_conf[tag] = {
            color: this.getDefaultColors()['default'],
            display: false
          });
        }
      }
      return results;
    };

    TagsManager.prototype.getDefaultColors = function() {
      return this.colors;
    };

    return TagsManager;

  })();

}).call(this);
